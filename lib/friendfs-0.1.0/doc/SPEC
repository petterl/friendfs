friendfs

Config file
============
We might want to make a yecc parser for tokanizing the configuration stuff.

### Storage configuration
###
### Define the stores used for the filesystem
### Store can be of type: file, ftp, ssh etc
###  

Default home
Gnupgkey 0xEF8S82332

# This is the home directory filesystem
<Filesystem home>
  Comment "Home directory"
  Storage ftp://user@password:ftp.example.com/example/dir/
  Storage ssh://user:password@example.com/home/fs/dir
  Storage filestore
  Ratio 4
</Filesystem>

<Filesystem pictures>
  Comment "Pictures directory"
  Storage ftp://user@password:ftp.example.com/example/dir/
  Storage filestore
  Ratio 4
</Filesystem>

<Storage filestore>
  Path file://var/local/fs
  Prio 10
  Polling 30000
</Storage>

which will be translated into this internal erlang representation:

[{'Default',"home"},
 {'Gnupgkey',"0xEF8S82332"},
 {'Filesystem',"home",
   [{'Comment',"Home directory"},
    {'Storage',"ftp://user@password:ftp.example.com/example/dir/"},
    {'Storage',"ssh://user:password@example.com/home/fs/dir"},
    {'Storage',"filestore"},
    {'Ratio',4}]
 },
 {'Filesystem',"pictures",
  [{'Comment',"Pictures directory"},
   {'Storage',"ftp://user@password:ftp.example.com/example/dir/"},
   {'Storage',"filestore"},
   {'Ratio',4}]},
 {'Storage',"filestore",
  [{'Path',"file://var/local/fs"},
   {'Prio',10},
   {"Polling",30000}]}
]

We might also want to make it possible to do the following:

<Filesystem pictures>
  Comment "Pictures directory"
  <Storage>
    Path ftp://user@password:ftp.example.com/example/dir/
  </Storage>
</Filesystem>

which would result in this internal rep:

[{'Filesystem',"pictures",
  [{'Comment',"Pictures directory"},
   {'Storage',"",
    [{'Path',"ftp://user@password:ftp.example.com/example/dir/"},
     {'Polling',40000}]},
   {'Ratio',4}]}
]

The default values in the above examples would be taken from the file called
friendfs/priv/default.config. It looks like this:

<Filesystem>
  Comment "No comment"
  Ratio 4
</Filesystem>

<Storage>
  Path $mandatory
  Prio 10
  Polling 30000
</Storage>

hopefully most of it is pretty self explanatory.


Controlling the Daemon
======================

The daemon needs to be started to connect new mountpoints
If a mount is initiated the daemon will be started in the process 
if not started before.

Starting the daemon is done by running 
  friendfsctl start 
If you want a specific config file you can add: 
  --config=path/friendfs.conf
  (/etc/friendfs.conf is defult)

You can also check the status of the system with
  friendfsctl status

Status gives information about the storages status and the stored amount on
each. It also gives information about the scheduler and how the file ratio 
is holding up. Maybe also information about files with low ratio.


Mounting a filesystem
=====================
You can mount a filesystem with this command if you are root:
  mount -t fuse friendfs /mnt/fs -o fs=home

or as a normal user:
  friendfs /mnt/fs -o fs=home

This will connect to the filesystem with the name fs ans mount it in
the mountpoint.

Architecture
=-=-=-=-=-=-

Mountpoint ffs_mountpoint
========== 

The FUSE interaction module, handles connection beween FUSE and the 
filesystem.

One process per mountpoint connected to a specific filesystem. All are
supervised by the ffs_mountpoint_sup supervisor using a one_for_one
strategy.

These processes are named processes which have the name of
list_to_atom(MountPoint).

The options which can be specified are:
    fs - the filesystem to be mounted

mount(MountPoint::string(),Opts::string()) -> {ok,atom()} | {error,Reason}
umount(MountPoint::string()) -> ok | {error,Reason}

Examples:

mount("/home/lukas/","fs=home").
umount("/home/lukas/").

Filesystem ffs_filesystem
==========
Handle file system 

Contains information about the file allocation table and file -> chunk relation
Connects all needed Storages from config file for filesystem and
verify the filesystem before making it accessible.

One process per filesystem defined in config file. All are
supervised by the ffs_filesystem_sup supervisor using a one_for_one
strategy.

These processes are named processes which have the name of list_to_atom(Name).

start_link(Name::string(),Storages::list()) -> {ok,atom()} | {error,Reason}
stop(Name::string()) -> ok | {error,Reason}
add_storage(Storage) -> ok | {error,Reason}
remove_storage(Storage) -> ok | {error,Reason}


and lost of file access functions like:
chunk_ratio(Chunk) -> int()


Friendfs Manager friendfs_mgr
===============



connect(Storage)
disconnect(Storage)
read(Chunk) -> Data
write(Chunk, Ratio, Data)  
verify_chunk(Chunk, Ratio) -> {ok, Ratio} | {error, chunk_not_accessible}

All writes are put in a prioritized queue, the first write of a chunk is always
prioritized.

One process.

Storage ffs_storage_*
=======
Handles datastorage of chunks

connect(Storage)
disconnect(Storage)
list() -> [Shunks]
read(Chunk) -> Data
write(Chunk, Data)



Process chart:

                                   APP
                                   1|
                                    |
                                    |1    
                             friendfs_sup - - - - - - - -
                         1/        1\     1              \
                        /             \                    \
                      /                 \                    \
                     | 1                 | 1                   | 1
               ffs_storage_sup   ffs_filesystem_sup    ffs_mountpoint_sup
                    1|                   1|                   1|
                     |                    |                    |
                     |*                   |*                   |*
               ffs_storage_XX      ffs_filesystem        ffs_mountpoint
                (gen_server)        (gen_server)            (fuserl)


Sample System:

ffs_storage_XX                 ffs_filesystem              ffs_mountpoint


SSH1 - - - - - - - - - - -\                   / - - - - - - - - /home/public
                            \               /
                              \           /
                                \       /
SSH2 - - - - - - - \              \   /
                    \ - - - - - - HOME - - - - - - - - - - - - /home/lukas



